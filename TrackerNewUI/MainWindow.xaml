<Window x:Class="TrackerNewUI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:p="clr-namespace:TrackerNewUI.Properties"
        xmlns:local="clr-namespace:TrackerNewUI"
        mc:Ignorable="d"
        Title="{x:Static p:Resources.MAIN_WINDOW_TITLE}" Height="450" Width="800" WindowStartupLocation="CenterScreen" SizeToContent="WidthAndHeight" ResizeMode="NoResize"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" Closing="Window_Closing" WindowStyle="None" Icon="/Assets/TT_darkgray_near_black_background_24x24.png"
        >
    <Window.Resources>
        <ResourceDictionary>

            <!-- Base colors start -->
            <SolidColorBrush x:Key="BrushWhite" Color="{StaticResource ResourceKey=AppWhite}"/>
            <SolidColorBrush x:Key="BrushDarkGreen" Color="{StaticResource ResourceKey=AppDarkGreen}"/>
            <SolidColorBrush x:Key="BrushLightGreen" Color="{StaticResource ResourceKey=AppLightGreen}" />
            <SolidColorBrush x:Key="BrushDarkBrown" Color="{StaticResource ResourceKey=AppDarkBrown}" />
            <SolidColorBrush x:Key="BrushLightBrown" Color="{StaticResource ResourceKey=AppLightBrown}" />
            <!-- Base colors end -->

            <!-- Header label start -->
            <Style x:Key="HeaderLabelStyle" BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                <Setter Property="Background" Value="{StaticResource BrushLightBrown}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushLightBrown}"/>
            </Style>
            <!-- Header label end -->

            <!-- Area header label start -->
            <Style x:Key="AreaHeaderLabelStyle" BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                <Setter Property="Background" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushDarkBrown}"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushLightBrown}"/>
            </Style>
            <!-- Area header label end -->

            <!-- Normal label start -->
            <Style x:Key="NormalLabelStyle" BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                <Setter Property="Background" Value="{StaticResource BrushWhite}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
            </Style>
            <!-- Normal label end -->

            <!-- Header minimized button start -->
            <Style x:Key="HeaderMinimizeButtonStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="Border"
                                    Background="{StaticResource BrushLightBrown}"
                                    Margin="0"
                                    BorderThickness="2"
                                    BorderBrush="{StaticResource BrushDarkBrown}"
                                    Padding="7">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{StaticResource BrushDarkBrown}" TargetName="Border"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
            </Style>
            <!-- Header minimized button end -->

            <!-- Navigation buttons start -->
            <Style x:Key="NavigationButtonStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="Border"
                                    Background="{StaticResource BrushDarkGreen}"
                                    Margin="10,10,10,0"
                                    CornerRadius="15"
                                    BorderThickness="0"
                                    BorderBrush="{StaticResource BrushDarkGreen}"
                                    Padding="7">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource BrushLightGreen}" TargetName="Border"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{StaticResource BrushLightBrown}" TargetName="Border"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{StaticResource BrushWhite}" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource BrushDarkBrown}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!-- Navigation buttons end -->

            <!-- ComboBox start -->
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="Violet" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="TextBox.Static.Background" Color="{StaticResource AppWhite}"/>
            <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="MinHeight" Value="0"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="ComboBox.Static.Background" Color="{StaticResource AppWhite}"/>
            <SolidColorBrush x:Key="ComboBox.Static.Border" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="{StaticResource AppWhite}"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="{StaticResource AppLightBrown}"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="{StaticResource AppLightBrown}"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="{StaticResource AppLightBrown}"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="{StaticResource AppLightBrown}"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="{StaticResource AppLightBrown}"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="{StaticResource AppDarkGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="{StaticResource AppLightBrown}"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="{StaticResource AppWhite}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="{StaticResource AppLightGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="{StaticResource AppLightGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="{StaticResource AppWhite}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="{StaticResource AppLightGreen}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
            <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                    <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" StrokeThickness="1"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="dropDownBorder" Background="{StaticResource ComboBox.Static.Editable.Background}" BorderBrush="{StaticResource ComboBox.Static.Editable.Border}" BorderThickness="1">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </theme:SystemDropShadowChrome>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                        <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="true">
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                        <Setter Property="Color" TargetName="shadow" Value="{StaticResource ResourceKey=AppLightBrown}"/>
                    </Trigger>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                    </MultiTrigger>
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="dropDownBorder" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="1">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </theme:SystemDropShadowChrome>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                        <Setter Property="Color" TargetName="shadow" Value="{StaticResource ResourceKey=AppLightBrown}"/>
                    </Trigger>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                    </MultiTrigger>
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="Padding" Value="6,5,5,5"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
                <Style.Triggers>
                    <Trigger Property="IsEditable" Value="true">
                        <Setter Property="IsTabStop" Value="false"/>
                        <Setter Property="Padding" Value="2"/>
                        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border x:Name="Border" Padding="2" SnapsToDevicePixels="true" Background="Transparent">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource AppLightBrown}" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Normal">
                                            <Storyboard>
                                                <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                    <EasingColorKeyFrame KeyTime="0" Value="Transparent" />
                                                </ColorAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <ContentPresenter />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- ComboBox end -->

            <!-- Functional buttons start -->
            <Style x:Key="FunctionalButtonStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Name="Border"
                                    Background="{StaticResource BrushDarkGreen}"
                                    Margin="10,10,10,10"
                                    CornerRadius="5"
                                    BorderThickness="2"
                                    BorderBrush="{StaticResource BrushLightBrown}"
                                    Padding="5">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="{StaticResource BrushDarkBrown}" TargetName="Border"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource BrushLightGreen}" TargetName="Border"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{StaticResource BrushLightBrown}" TargetName="Border"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{StaticResource BrushWhite}" />
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource BrushDarkBrown}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!-- Functional buttons end -->

            <!-- DataGrid start -->
            <Style x:Key="DataGridStyle" BasedOn="{StaticResource {x:Type DataGrid}}" TargetType="DataGrid">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="VerticalGridLinesBrush" Value="{StaticResource BrushDarkGreen}"/>
            </Style>
            <Style x:Key="DataGridColumnHeaderStyle" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" TargetType="DataGridColumnHeader">
                <Setter Property="Background" Value="{StaticResource BrushDarkGreen}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushLightBrown}"/>
                <Setter Property="Padding" Value="4"/>
            </Style>
            <Style x:Key="DataGridRowStyle" BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="DataGridRow">
                <Setter Property="Background" Value="{StaticResource BrushWhite}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushDarkGreen}"/>
            </Style>
            <!-- DataGrid end -->

        </ResourceDictionary>
    </Window.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Top" >
            <Button DockPanel.Dock="Right" x:Name="HeaderMinimizeButton" Content="&#x2193;" Style="{StaticResource HeaderMinimizeButtonStyle}" BorderBrush="{DynamicResource BrushDarkBrown}" Click="HeaderMinimizeButton_Click" />
            <Label DockPanel.Dock="Left" x:Name="HeaderLabel" Content="{x:Static p:Resources.MAIN_WINDOW_TITLE}" Style="{StaticResource HeaderLabelStyle}" MouseDown="HeaderLabel_MouseDown"/>
        </DockPanel>
        <Grid>
            <DockPanel Grid.ColumnSpan="2">
                <Border BorderBrush="{StaticResource BrushDarkGreen}" BorderThickness="0,0,2,0">
                    <Grid x:Name="NavigationPanel" DockPanel.Dock="Left" Background="{StaticResource BrushWhite}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="6*"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Row="0">
                            <Button x:Name="ProcessingButton" Content="{x:Static p:Resources.PROCESSING_BUTTON_TEXT}" Style="{StaticResource NavigationButtonStyle}" Click="ProcessingButton_Click" />
                            <Button x:Name="ReportingButton" Content="{x:Static p:Resources.REPORTING_BUTTON_TEXT}"  Style="{StaticResource NavigationButtonStyle}" Click="ReportingButton_Click"/>
                            <Button x:Name="AdministrationButton" Content="{x:Static p:Resources.ADMIN_BUTTON_TEXT}" Style="{StaticResource NavigationButtonStyle}" Click="AdministrationButton_Click" />
                        </StackPanel>
                        <StackPanel Grid.Row="1">
                            <Button x:Name="ExitButton" Content="{x:Static p:Resources.EXIT_BUTTON_TEXT}"  Style="{StaticResource NavigationButtonStyle}" Click="ExitButton_Click" VerticalAlignment="Bottom"/>
                        </StackPanel>
                    </Grid>
                </Border>
                <Grid DockPanel.Dock="Right" Height="400" Width="400" Background="White">
                    <Grid x:Name="ProcessingPanel" Background="{StaticResource BrushWhite}" Visibility="Hidden">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition Height="2*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="10" Content="{x:Static p:Resources.PROCESSING_BUTTON_TEXT}" Style="{DynamicResource AreaHeaderLabelStyle}"/>
                        <Label Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Content="{x:Static p:Resources.CATEGORY_LABEL_TEXT}" HorizontalAlignment="Center" VerticalAlignment="Center"  Foreground="{StaticResource BrushDarkGreen}" FontWeight="Bold"/>
                        <ComboBox Style="{DynamicResource ComboBoxStyle}" x:Name="ProcessingCategoryComboBox" Grid.Row="2" Grid.Column="3" Grid.ColumnSpan="7" ItemsSource="{Binding}" VerticalAlignment="Center" Margin="0,0,20,0">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Name}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <Button x:Name="ProcessingStartButton" Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="4" Content="{x:Static p:Resources.START_BUTTON_TEXT}"  Style="{StaticResource FunctionalButtonStyle}" Click="ProcessingStartButton_Click"/>
                        <Button x:Name="ProcessingStopButton" Grid.Row="3" Grid.Column="5" Grid.ColumnSpan="4" Content="{x:Static p:Resources.STOP_BUTTON_TEXT}"  Style="{StaticResource FunctionalButtonStyle}" Click="ProcessingStopButton_Click" IsEnabled="False"/>
                    </Grid>
                    <Grid x:Name="ReportingPanel" Background="{StaticResource BrushWhite}" Visibility="Hidden">
                        <Label HorizontalAlignment="Center" VerticalAlignment="Center">Reporting</Label>
                    </Grid>
                    <Grid x:Name="AdministrationPanel" Background="{StaticResource BrushWhite}" Visibility="Visible">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition Height="40"/>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" Grid.Column="0" Content="{x:Static p:Resources.ADMIN_BUTTON_TEXT}" Style="{DynamicResource AreaHeaderLabelStyle}"/>
                        <DataGrid x:Name="AdministrationCategoriesDataGrid" Grid.Row="1" Grid.Column="0" Margin="0,5,0,0" HeadersVisibility="Column"
                                  Style="{DynamicResource DataGridStyle}" 
                                  ColumnHeaderStyle="{DynamicResource DataGridColumnHeaderStyle}"
                                  RowStyle="{DynamicResource DataGridRowStyle}" AutoGenerateColumns="False" CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserSortColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserResizeRows="False">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="{x:Static p:Resources.ADMIN_CAT_TABLE_CATEGORY}" Width="*" Binding="{Binding Name}" IsReadOnly="True"/>
                                <DataGridCheckBoxColumn Header="{x:Static p:Resources.ADMIN_CAT_TABLE_ACTIVE}" Binding="{Binding Active}"></DataGridCheckBoxColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                        <Grid Grid.Row="2" Grid.Column="0" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="AdministrationNewButton" Grid.Row="0" Grid.Column="0" Content="{x:Static p:Resources.ADMIN_NEW_BUTTON_TEXT}" Style="{StaticResource FunctionalButtonStyle}" Click="AdministrationNewButton_Click"/>
                            <Button x:Name="AdministrationDeleteButton" Grid.Row="0" Grid.Column="1" Content="{x:Static p:Resources.ADMIN_DELETE_BUTTON_TEXT}" Style="{StaticResource FunctionalButtonStyle}" Click="AdministrationDeleteButton_Click"/>
                        </Grid>
                    </Grid>
                </Grid>
            </DockPanel>
            <Grid x:Name="ConfirmPanel"  Background="Transparent" Visibility="Hidden" Grid.ColumnSpan="2" MaxWidth="500">
                <Grid.RowDefinitions>
                    <RowDefinition Height="2*"/>
                    <RowDefinition />
                    <RowDefinition Height="2*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="5*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Border Grid.Row="1" Grid.Column="1" BorderThickness="2" BorderBrush="{StaticResource BrushLightBrown}" Background="{StaticResource BrushWhite}"/>
                <Grid Grid.Row="1" Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Label Content="{x:Static p:Resources.CONFIRM_HEADER}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Style="{DynamicResource HeaderLabelStyle}"/>
                    <TextBlock x:Name="ConfirmPanelMessageTextBlock" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" TextWrapping="Wrap" Margin="2,7,2,0" Padding="3"/>
                    <!--<Label x:Name="ConfirmPanelMessageLabel" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Style="{DynamicResource NormalLabelStyle}" Margin="2,7,2,0">
                        <AccessText x:Name="ConfirmPanelMessageLabelText" TextWrapping="Wrap"/>
                    </Label>-->
                    <Button x:Name="ConfirmPanelYesButton" Grid.Row="2" Grid.Column="0" Content="{x:Static p:Resources.YES_BUTTON_TEXT}" Style="{StaticResource FunctionalButtonStyle}" Click="ConfirmPanelYesButton_Click"/>
                    <Button x:Name="ConfirmPanelNoButton" Grid.Row="2" Grid.Column="1" Content="{x:Static p:Resources.NO_BUTTON_TEXT}" Style="{StaticResource FunctionalButtonStyle}" Click="ConfirmPanelNoButton_Click"/>
                </Grid>
            </Grid>
            <Grid x:Name="ErrorPanel"  Background="Transparent" Visibility="Hidden" Grid.ColumnSpan="2" MaxWidth="500">
                <Grid.RowDefinitions>
                    <RowDefinition Height="2*"/>
                    <RowDefinition />
                    <RowDefinition Height="2*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="5*"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Border Grid.Row="1" Grid.Column="1" BorderThickness="2" BorderBrush="{StaticResource BrushLightBrown}" Background="{StaticResource BrushWhite}"/>
                <Grid Grid.Row="1" Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Label Content="{x:Static p:Resources.ERROR_HEADER}" Style="{DynamicResource HeaderLabelStyle}"/>
                    <Label x:Name="ErrorPanelMessageLabel" Grid.Row="1" Style="{DynamicResource NormalLabelStyle}" Margin="2,7,2,0"/>
                    <Button x:Name="ErrorPanelOkButton" Grid.Row="2" Content="{x:Static p:Resources.OK_BUTTON_TEXT}" Style="{StaticResource FunctionalButtonStyle}" Click="ErrorPanelOkButton_Click" />
                </Grid>
            </Grid>
        </Grid>
    </DockPanel>
</Window>
